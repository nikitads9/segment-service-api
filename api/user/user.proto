syntax = "proto3";

package segment.service.api;

option go_package = "github.com/nikitads9/segment-service-api/pkg/user_api;user_v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

service UserV1Service {
    rpc ModifySegments (ModifySegmentsRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/user/modify-segments"
            body: "*"
        };
    }

    rpc GetSegments (GetSegmentsRequest) returns (GetSegmentsResponse) {
        option (google.api.http) = {
            get: "/user/get-segments/{id}"
        };
    }

    rpc SetExpireTime (SetExpireTimeRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/user/set-expire-time"
            body: "*"
        };
    }

    rpc AddUser (AddUserRequest) returns (AddUserResponse) {
        option (google.api.http) = {
            post: "/user/add-user"
            body: "*"
        };
    }

    rpc RemoveUser (RemoveUsertRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/user/remove-user/{id}"
        };
    }
    
    rpc GetUserHistoryCsv (GetUserHistoryCsvRequest) returns (stream GetUserHistoryCsvResponse) {
        option (google.api.http) = {
            get: "/user/download-history/{id}"
            response_body: "*"
        };
    }
}

message ModifySegmentsRequest {
    int64 id = 1 [json_name = "id", (validate.rules).int64 = {gt : 0}];
    repeated string slug_to_add = 2 [json_name = "slugs-to-add", (validate.rules).repeated = {
        unique : true
        items: {
            string: {
                min_len: 1
                max_len: 100
            }
        }}];
    repeated string slug_to_remove = 3 [json_name = "slugs-to-remove", (validate.rules).repeated = {
        unique : true
        items: {
            string: {
                min_len: 1
                max_len: 100
            }
        }
    }];

}

message GetSegmentsRequest {
    int64 id = 1 [json_name = "id", (validate.rules).int64 = {gt : 0}];
}

message GetSegmentsResponse{
    repeated string slugs =1;
}

message SetExpireTimeRequest {
    int64 id = 1;
    string slug = 2;
    google.protobuf.Timestamp expiration_time = 3 [json_name = "expiration-time"];
}

message AddUserRequest {
    string user_name = 1 [json_name = "user_name", (validate.rules).string = {min_len: 1, max_len: 100}];
}

message AddUserResponse {
    int64 id = 1;
}

message RemoveUsertRequest {
    int64 id = 1 [json_name = "id", (validate.rules).int64 = {gt : 0}];
}

message GetUserHistoryCsvRequest {
    int64 id = 1 [json_name = "id", (validate.rules).int64 = {gt : 0}];
}

message GetUserHistoryCsvResponse {
    bytes chunk = 1;
}