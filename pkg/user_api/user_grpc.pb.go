// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: user.proto

package user_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserV1ServiceClient is the client API for UserV1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserV1ServiceClient interface {
	ModifySegments(ctx context.Context, in *ModifySegmentsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSegments(ctx context.Context, in *GetSegmentsRequest, opts ...grpc.CallOption) (*GetSegmentsResponse, error)
}

type userV1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserV1ServiceClient(cc grpc.ClientConnInterface) UserV1ServiceClient {
	return &userV1ServiceClient{cc}
}

func (c *userV1ServiceClient) ModifySegments(ctx context.Context, in *ModifySegmentsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/segment.service.api.UserV1Service/ModifySegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userV1ServiceClient) GetSegments(ctx context.Context, in *GetSegmentsRequest, opts ...grpc.CallOption) (*GetSegmentsResponse, error) {
	out := new(GetSegmentsResponse)
	err := c.cc.Invoke(ctx, "/segment.service.api.UserV1Service/GetSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserV1ServiceServer is the server API for UserV1Service service.
// All implementations must embed UnimplementedUserV1ServiceServer
// for forward compatibility
type UserV1ServiceServer interface {
	ModifySegments(context.Context, *ModifySegmentsRequest) (*emptypb.Empty, error)
	GetSegments(context.Context, *GetSegmentsRequest) (*GetSegmentsResponse, error)
	mustEmbedUnimplementedUserV1ServiceServer()
}

// UnimplementedUserV1ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserV1ServiceServer struct {
}

func (UnimplementedUserV1ServiceServer) ModifySegments(context.Context, *ModifySegmentsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySegments not implemented")
}
func (UnimplementedUserV1ServiceServer) GetSegments(context.Context, *GetSegmentsRequest) (*GetSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegments not implemented")
}
func (UnimplementedUserV1ServiceServer) mustEmbedUnimplementedUserV1ServiceServer() {}

// UnsafeUserV1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserV1ServiceServer will
// result in compilation errors.
type UnsafeUserV1ServiceServer interface {
	mustEmbedUnimplementedUserV1ServiceServer()
}

func RegisterUserV1ServiceServer(s grpc.ServiceRegistrar, srv UserV1ServiceServer) {
	s.RegisterService(&UserV1Service_ServiceDesc, srv)
}

func _UserV1Service_ModifySegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserV1ServiceServer).ModifySegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/segment.service.api.UserV1Service/ModifySegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserV1ServiceServer).ModifySegments(ctx, req.(*ModifySegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserV1Service_GetSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserV1ServiceServer).GetSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/segment.service.api.UserV1Service/GetSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserV1ServiceServer).GetSegments(ctx, req.(*GetSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserV1Service_ServiceDesc is the grpc.ServiceDesc for UserV1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserV1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "segment.service.api.UserV1Service",
	HandlerType: (*UserV1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModifySegments",
			Handler:    _UserV1Service_ModifySegments_Handler,
		},
		{
			MethodName: "GetSegments",
			Handler:    _UserV1Service_GetSegments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
