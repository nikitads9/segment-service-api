// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: segment.proto

package segment_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddSegmentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddSegmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSegmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSegmentRequestMultiError, or nil if none found.
func (m *AddSegmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSegmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetSlug()); l < 1 || l > 30 {
		err := AddSegmentRequestValidationError{
			field:  "Slug",
			reason: "value length must be between 1 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddSegmentRequestMultiError(errors)
	}

	return nil
}

// AddSegmentRequestMultiError is an error wrapping multiple validation errors
// returned by AddSegmentRequest.ValidateAll() if the designated constraints
// aren't met.
type AddSegmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSegmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSegmentRequestMultiError) AllErrors() []error { return m }

// AddSegmentRequestValidationError is the validation error returned by
// AddSegmentRequest.Validate if the designated constraints aren't met.
type AddSegmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSegmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSegmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSegmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSegmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSegmentRequestValidationError) ErrorName() string {
	return "AddSegmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSegmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSegmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSegmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSegmentRequestValidationError{}

// Validate checks the field values on AddSegmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSegmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSegmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSegmentResponseMultiError, or nil if none found.
func (m *AddSegmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSegmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddSegmentResponseMultiError(errors)
	}

	return nil
}

// AddSegmentResponseMultiError is an error wrapping multiple validation errors
// returned by AddSegmentResponse.ValidateAll() if the designated constraints
// aren't met.
type AddSegmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSegmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSegmentResponseMultiError) AllErrors() []error { return m }

// AddSegmentResponseValidationError is the validation error returned by
// AddSegmentResponse.Validate if the designated constraints aren't met.
type AddSegmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSegmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSegmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSegmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSegmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSegmentResponseValidationError) ErrorName() string {
	return "AddSegmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddSegmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSegmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSegmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSegmentResponseValidationError{}

// Validate checks the field values on RemoveSegmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveSegmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveSegmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveSegmentRequestMultiError, or nil if none found.
func (m *RemoveSegmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveSegmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RemoveSegmentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveSegmentRequestMultiError(errors)
	}

	return nil
}

// RemoveSegmentRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveSegmentRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveSegmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveSegmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveSegmentRequestMultiError) AllErrors() []error { return m }

// RemoveSegmentRequestValidationError is the validation error returned by
// RemoveSegmentRequest.Validate if the designated constraints aren't met.
type RemoveSegmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSegmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSegmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSegmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSegmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSegmentRequestValidationError) ErrorName() string {
	return "RemoveSegmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSegmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSegmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSegmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSegmentRequestValidationError{}
